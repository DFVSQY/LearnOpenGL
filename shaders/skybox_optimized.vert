#version 330 core

layout(location = 0) in vec3 aPos;

/*
 * 立方体贴图采样基于方向： 立方体贴图（Cube Map）的采样主要依赖传入的方向向量，而不是它的长度。
 * OpenGL 中的 texture() 函数在采样立方体贴图时只关注传入的纹理坐标向量的方向，因此从理论上来说，传入的向量长度并不会影响最终采样到的纹理颜色。
 * 换句话说，如果将 aPos 乘以一个缩放系数（如 aPos * scale），虽然会改变向量的长度，
 * 但由于立方体贴图采样只关心方向，这个缩放不会直接影响方向，所以在理想条件下，采样结果应保持不变。
*/
out vec3 texCoord;

// 去除了平移的视点矩阵
uniform mat4 rotView;

uniform mat4 projection;

void main()
{
    // 直接将天空盒的顶点坐标作为纹理采样坐标是可以的，且是渲染天空盒时的常用做法。
    // 这种方式利用了立方体映射（Cube Mapping）的原理，使得每个顶点的方向向量可以直接用来采样立方体贴图。
    // 天空盒的网格通常是一个立方体，顶点的坐标范围在 [-1, 1] 之间。
    // 由于这些顶点坐标正好可以表示立方体中的方向向量，因此可以直接将顶点坐标 aPos 作为采样立方体贴图的纹理坐标。
    texCoord = aPos;
    vec4 pos = projection * rotView * vec4(aPos, 1.0);

    // 在 OpenGL 渲染天空盒时，gl_Position = pos.xyww 是一种优化技巧，目的是让天空盒的顶点在深度缓冲中始终位于最远处，避免影响场景中其他物体的深度值。
    // 通常，天空盒是在场景中的第一个对象渲染，因为天空盒应该是背景，不遮挡场景中任何物体。
    // 然而，由于现代 GPU 提供了 Early-Z 剔除（即在光栅化之前对片元进行深度测试），我们可以将天空盒放到渲染的最后，并且不必手动设置深度缓冲值。
    // 为此，我们需要确保天空盒始终位于所有场景物体的后面。
    // 由于 gl_Position.z 被设置为和 gl_Position.w 相同，意味着在裁剪空间中，天空盒的每个顶点的 z 值将等于1（经过透视除法后 z/w = w/w = 1）。
    // 在 NDC 坐标中，z = 1 对应的是最远平面，这意味着天空盒的所有顶点都会被认为在深度缓冲区的最远处。
    // 这样做的效果是，无论你渲染什么物体，这些物体的深度值永远会比天空盒靠近相机。
    // 由于天空盒的 z 值总是 1，任何场景中的物体都会通过深度测试，天空盒不会遮挡其他物体。
    // 因此，天空盒可以在最后渲染，节省 Early-Z 剔除中的片元计算，同时不会修改或干扰场景中其他物体的深度值。
    gl_Position = pos.xyww;
}
